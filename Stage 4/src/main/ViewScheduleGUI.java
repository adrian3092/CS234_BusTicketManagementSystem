package main;

import depot.DepotManager;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;

/**
 * GUI for viewing all available schedules
 * @author Adrian Zielinski
 */
public class ViewScheduleGUI extends javax.swing.JFrame {

    private ScheduleManager scheduleManager;
    private RouteManager routeManager;
    private DepotManager depotManager;
    
    /**
     * creates new form ViewScheduleGUI with default managers
     */
    public ViewScheduleGUI() {
        initComponents();
        setLocationRelativeTo(null);
    }
    
    /**
     * creates new form ViewScheduleGUI with specified managers
     * @param scheduleManager the schedule manager
     * @param routeManager the route manager
     * @param depotManager the depot manager
     */
    public ViewScheduleGUI(ScheduleManager scheduleManager, RouteManager routeManager, DepotManager depotManager) {
        initComponents();
        this.scheduleManager = scheduleManager;
        this.routeManager = routeManager;
        this.depotManager = depotManager;
        
        // set row height to better display content
        tableSchedule.setRowHeight(40);
        
        populateScheduleTable();
        
        // set preferred column widths after populating data
        tableSchedule.getColumnModel().getColumn(0).setPreferredWidth(100); // name
        tableSchedule.getColumnModel().getColumn(1).setPreferredWidth(100); // route
        tableSchedule.getColumnModel().getColumn(2).setPreferredWidth(80);  // start time
        tableSchedule.getColumnModel().getColumn(3).setPreferredWidth(150); // departure times
        tableSchedule.getColumnModel().getColumn(4).setPreferredWidth(200); // stops
        
        setLocationRelativeTo(null);
    }
    
    /**
     * populates the schedule table with data from the schedule manager
     */
    private void populateScheduleTable() {
        DefaultTableModel model = (DefaultTableModel) tableSchedule.getModel();
        model.setRowCount(0); // clear existing rows
        
        ArrayList<Schedule> schedules = scheduleManager.getSchedules();
        
        if (schedules.isEmpty()) {
            // display a message when no schedules are available
            model.addRow(new Object[]{"No schedules available", "", "", "", ""});
            return;
        }
        
        for (Schedule schedule : schedules) {
            String name = schedule.getName();
            String routeName = schedule.getRoute() != null ? schedule.getRoute().getName() : "N/A";
            String startTime = formatTime(schedule.getStartTime());
            
            // format departure times as comma-separated list
            String departureTimes = "";
            if (schedule.getDepartureTimes() != null && !schedule.getDepartureTimes().isEmpty()) {
                for (int i = 0; i < schedule.getDepartureTimes().size(); i++) {
                    departureTimes += formatTime(schedule.getDepartureTimes().get(i));
                    if (i < schedule.getDepartureTimes().size() - 1) {
                        departureTimes += ", ";
                    }
                }
            } else {
                departureTimes = "N/A";
            }
            
            // format stops as comma-separated list
            String stops = "";
            if (schedule.getRoute() != null && schedule.getRoute().getStops() != null && 
                !schedule.getRoute().getStops().isEmpty()) {
                for (int i = 0; i < schedule.getRoute().getStops().size(); i++) {
                    stops += schedule.getRoute().getStops().get(i).getName();
                    if (i < schedule.getRoute().getStops().size() - 1) {
                        stops += ", ";
                    }
                }
            } else {
                stops = "N/A";
            }
            
            model.addRow(new Object[]{name, routeName, startTime, departureTimes, stops});
        }
    }
    
    /**
     * formats a double time value to a string in the format HH:MM
     * @param time the time as a double
     * @return the formatted time string
     */
    private String formatTime(double time) {
        int hours = (int) time;
        int minutes = (int) (((time - hours) * 100) + 0.5);
        
        return String.format("%02d:%02d", hours, minutes);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelSchedule = new javax.swing.JPanel();
        scrollPaneSchedule = new javax.swing.JScrollPane();
        tableSchedule = new javax.swing.JTable();
        labelAvailableSchedules = new javax.swing.JLabel();
        returnButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Available Schedules");

        tableSchedule.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Route", "Start Time", "Departure Times", "Stops"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrollPaneSchedule.setViewportView(tableSchedule);

        javax.swing.GroupLayout panelScheduleLayout = new javax.swing.GroupLayout(panelSchedule);
        panelSchedule.setLayout(panelScheduleLayout);
        panelScheduleLayout.setHorizontalGroup(
            panelScheduleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelScheduleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPaneSchedule, javax.swing.GroupLayout.DEFAULT_SIZE, 797, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelScheduleLayout.setVerticalGroup(
            panelScheduleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelScheduleLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(scrollPaneSchedule, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51))
        );

        labelAvailableSchedules.setText("Available Schedules");

        returnButton.setText("Return to Main Menu");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(panelSchedule, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(labelAvailableSchedules)
                        .addGap(366, 366, 366))))
            .addGroup(layout.createSequentialGroup()
                .addGap(350, 350, 350)
                .addComponent(returnButton)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(labelAvailableSchedules, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelSchedule, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(returnButton)
                .addContainerGap(45, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * handles the return to main menu button click
     * @param evt the action event
     */
    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        // close this window and return to main menu
        this.dispose();
    }//GEN-LAST:event_returnButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewScheduleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewScheduleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewScheduleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewScheduleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // For testing purposes only
                ScheduleManager scheduleManager = new ScheduleManager();
                RouteManager routeManager = new RouteManager();
                DepotManager depotManager = new DepotManager();
                
                // Load data
                scheduleManager.loadSchedulesFromCSV(routeManager, depotManager);
                
                new ViewScheduleGUI(scheduleManager, routeManager, depotManager).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel labelAvailableSchedules;
    private javax.swing.JPanel panelSchedule;
    private javax.swing.JButton returnButton;
    private javax.swing.JScrollPane scrollPaneSchedule;
    private javax.swing.JTable tableSchedule;
    // End of variables declaration//GEN-END:variables
}
