/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package main;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;
import payment.Payment;

/**
 *
 * @author George Candal
 */
public class AdminMenuGUI extends javax.swing.JFrame {

    /**
     * Creates new form AdminMenuGUI
     */
    private Database database;
    
    public AdminMenuGUI(Database database) {
        this.database = database;

        initComponents();
        styleAdminButtons();
        normalizeButtonFonts();
        customizeTabHeaders();
        
        // load buses into the table
        populateBusTable();
        // load schedules into the table
        populateScheduleTable();
        // load routes into the table
        populateRouteTable();
        // load depots into the table
        populateDepotTable();
        // load employees into the table
        populateEmployeeTable();
        // load payments into the table
        populatePaymentsTable();
        // load expenses into the table
        populateExpensesTable();
        // passenger table
        populatePassengerTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabAdmin = new javax.swing.JTabbedPane();
        panelBus = new javax.swing.JPanel();
        btnAddBus = new javax.swing.JButton();
        btnManageBus = new javax.swing.JButton();
        busScrollPane = new javax.swing.JScrollPane();
        tableBus = new javax.swing.JTable();
        btnDeleteBus = new javax.swing.JButton();
        panelSchedule = new javax.swing.JPanel();
        btnAddSchedule = new javax.swing.JButton();
        btnRemoveSchedule = new javax.swing.JButton();
        btnManageSchedule = new javax.swing.JButton();
        schedulePane = new javax.swing.JScrollPane();
        tableSchedule = new javax.swing.JTable();
        panelRoute = new javax.swing.JPanel();
        btnAddRoute = new javax.swing.JButton();
        btnManageRoute = new javax.swing.JButton();
        btnRouteAssignment = new javax.swing.JButton();
        routePane = new javax.swing.JScrollPane();
        tableRoute = new javax.swing.JTable();
        btnDeleteRoute = new javax.swing.JButton();
        panelDepot = new javax.swing.JPanel();
        btnAddDepot = new javax.swing.JButton();
        btnDeleteDepot = new javax.swing.JButton();
        btnAssignBus = new javax.swing.JButton();
        btnUnassignBus = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableDepot = new javax.swing.JTable();
        panelEmployee = new javax.swing.JPanel();
        btnAddEmployee = new javax.swing.JButton();
        btnDeleteEmployee = new javax.swing.JButton();
        btnUpdateEmployee = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        tableEmployee = new javax.swing.JTable();
        panelExpenses = new javax.swing.JPanel();
        btnExpenseReport = new javax.swing.JButton();
        btnNewExpense = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableExpenses = new javax.swing.JTable();
        panelPayments = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablePayments = new javax.swing.JTable();
        btnPaymentReport = new javax.swing.JButton();
        btnAddPayment = new javax.swing.JButton();
        btnManagePayment = new javax.swing.JButton();
        btnDeletePayment = new javax.swing.JButton();
        panelPassenger = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPassengers = new javax.swing.JTable();
        btnAddPassenger = new javax.swing.JButton();
        btnManagePassenger = new javax.swing.JButton();
        btnDeletePassenger = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Admin Menu");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        tabAdmin.setBackground(new java.awt.Color(16, 32, 47));
        tabAdmin.setForeground(new java.awt.Color(215, 224, 223));
        tabAdmin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tabAdmin.setOpaque(true);
        tabAdmin.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabAdminStateChanged(evt);
            }
        });

        panelBus.setBackground(new java.awt.Color(215, 224, 223));

        btnAddBus.setText("Add a New Bus");
        btnAddBus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddBusActionPerformed(evt);
            }
        });

        btnManageBus.setText("Manage Bus");
        btnManageBus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManageBusActionPerformed(evt);
            }
        });

        tableBus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Bus ID", "Year/Make/Model", "Mileage", "Seating Capacity", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        busScrollPane.setViewportView(tableBus);

        btnDeleteBus.setText("Delete Bus");
        btnDeleteBus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteBusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBusLayout = new javax.swing.GroupLayout(panelBus);
        panelBus.setLayout(panelBusLayout);
        panelBusLayout.setHorizontalGroup(
            panelBusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBusLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(panelBusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnManageBus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                    .addComponent(btnAddBus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDeleteBus, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(busScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 599, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
        );
        panelBusLayout.setVerticalGroup(
            panelBusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBusLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(panelBusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(busScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelBusLayout.createSequentialGroup()
                        .addComponent(btnAddBus)
                        .addGap(18, 18, 18)
                        .addComponent(btnManageBus)
                        .addGap(18, 18, 18)
                        .addComponent(btnDeleteBus)))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        tabAdmin.addTab("Bus", panelBus);

        panelSchedule.setBackground(new java.awt.Color(215, 224, 223));

        btnAddSchedule.setText("Add a New Schedule");
        btnAddSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddScheduleActionPerformed(evt);
            }
        });

        btnRemoveSchedule.setText("Delete Schedule");
        btnRemoveSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveScheduleActionPerformed(evt);
            }
        });

        btnManageSchedule.setText("Manage Schedule");
        btnManageSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManageScheduleActionPerformed(evt);
            }
        });

        tableSchedule.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Route", "Start Time", "Departure Times", "Stops"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        schedulePane.setViewportView(tableSchedule);

        javax.swing.GroupLayout panelScheduleLayout = new javax.swing.GroupLayout(panelSchedule);
        panelSchedule.setLayout(panelScheduleLayout);
        panelScheduleLayout.setHorizontalGroup(
            panelScheduleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelScheduleLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(panelScheduleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddSchedule, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemoveSchedule, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnManageSchedule, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(schedulePane, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );
        panelScheduleLayout.setVerticalGroup(
            panelScheduleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelScheduleLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(panelScheduleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(schedulePane, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelScheduleLayout.createSequentialGroup()
                        .addComponent(btnAddSchedule)
                        .addGap(18, 18, 18)
                        .addComponent(btnManageSchedule)
                        .addGap(18, 18, 18)
                        .addComponent(btnRemoveSchedule)))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        tabAdmin.addTab("Schedule", panelSchedule);

        panelRoute.setBackground(new java.awt.Color(215, 224, 223));

        btnAddRoute.setText("Add Route");
        btnAddRoute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRouteActionPerformed(evt);
            }
        });

        btnManageRoute.setText("Manage Route");
        btnManageRoute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManageRouteActionPerformed(evt);
            }
        });

        btnRouteAssignment.setText("Manage Route Assignment");
        btnRouteAssignment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRouteAssignmentActionPerformed(evt);
            }
        });

        tableRoute.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Route ID", "Name", "Assigned Bus", "Assigned Driver"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        routePane.setViewportView(tableRoute);

        btnDeleteRoute.setText("Delete Route");
        btnDeleteRoute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteRouteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelRouteLayout = new javax.swing.GroupLayout(panelRoute);
        panelRoute.setLayout(panelRouteLayout);
        panelRouteLayout.setHorizontalGroup(
            panelRouteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRouteLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(panelRouteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnRouteAssignment, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnManageRoute, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddRoute, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteRoute, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(routePane, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );
        panelRouteLayout.setVerticalGroup(
            panelRouteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRouteLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(panelRouteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(routePane, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelRouteLayout.createSequentialGroup()
                        .addComponent(btnAddRoute)
                        .addGap(18, 18, 18)
                        .addComponent(btnManageRoute)
                        .addGap(18, 18, 18)
                        .addComponent(btnDeleteRoute)
                        .addGap(18, 18, 18)
                        .addComponent(btnRouteAssignment)))
                .addContainerGap(53, Short.MAX_VALUE))
        );

        tabAdmin.addTab("Route", panelRoute);

        panelDepot.setBackground(new java.awt.Color(215, 224, 223));

        btnAddDepot.setText("Add a New Depot");
        btnAddDepot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDepotActionPerformed(evt);
            }
        });

        btnDeleteDepot.setText("Delete Depot");
        btnDeleteDepot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteDepotActionPerformed(evt);
            }
        });

        btnAssignBus.setText("Assign a Bus to a Depot");
        btnAssignBus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignBusActionPerformed(evt);
            }
        });

        btnUnassignBus.setText("Unassign a Bus From a Depot");
        btnUnassignBus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUnassignBusActionPerformed(evt);
            }
        });

        tableDepot.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Depot ID", "Address"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableDepot);

        javax.swing.GroupLayout panelDepotLayout = new javax.swing.GroupLayout(panelDepot);
        panelDepot.setLayout(panelDepotLayout);
        panelDepotLayout.setHorizontalGroup(
            panelDepotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDepotLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(panelDepotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddDepot, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteDepot, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAssignBus, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUnassignBus, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 557, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );
        panelDepotLayout.setVerticalGroup(
            panelDepotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDepotLayout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(panelDepotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelDepotLayout.createSequentialGroup()
                        .addComponent(btnAddDepot)
                        .addGap(18, 18, 18)
                        .addComponent(btnDeleteDepot)
                        .addGap(18, 18, 18)
                        .addComponent(btnAssignBus)
                        .addGap(18, 18, 18)
                        .addComponent(btnUnassignBus)))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        tabAdmin.addTab("Depot", panelDepot);

        panelEmployee.setBackground(new java.awt.Color(215, 224, 223));

        btnAddEmployee.setText("Add a New Employee");
        btnAddEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddEmployeeActionPerformed(evt);
            }
        });

        btnDeleteEmployee.setText("Delete Employee");
        btnDeleteEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteEmployeeActionPerformed(evt);
            }
        });

        btnUpdateEmployee.setText("Manage Employee");
        btnUpdateEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateEmployeeActionPerformed(evt);
            }
        });

        tableEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Employee ID", "Job Title", "Email", "Phone Number", "Salary"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(tableEmployee);

        javax.swing.GroupLayout panelEmployeeLayout = new javax.swing.GroupLayout(panelEmployee);
        panelEmployee.setLayout(panelEmployeeLayout);
        panelEmployeeLayout.setHorizontalGroup(
            panelEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEmployeeLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(panelEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdateEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
        );
        panelEmployeeLayout.setVerticalGroup(
            panelEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEmployeeLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(panelEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelEmployeeLayout.createSequentialGroup()
                        .addComponent(btnAddEmployee)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdateEmployee)
                        .addGap(18, 18, 18)
                        .addComponent(btnDeleteEmployee)))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        tabAdmin.addTab("Employee", panelEmployee);

        panelExpenses.setBackground(new java.awt.Color(215, 224, 223));

        btnExpenseReport.setText("Generate Expense Report");
        btnExpenseReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExpenseReportActionPerformed(evt);
            }
        });

        btnNewExpense.setText("Add a New Expense");
        btnNewExpense.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewExpenseActionPerformed(evt);
            }
        });

        tableExpenses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Expense ID", "Type", "Entity", "Cost"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tableExpenses);

        javax.swing.GroupLayout panelExpensesLayout = new javax.swing.GroupLayout(panelExpenses);
        panelExpenses.setLayout(panelExpensesLayout);
        panelExpensesLayout.setHorizontalGroup(
            panelExpensesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelExpensesLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(panelExpensesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnExpenseReport, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNewExpense, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );
        panelExpensesLayout.setVerticalGroup(
            panelExpensesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelExpensesLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(panelExpensesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelExpensesLayout.createSequentialGroup()
                        .addComponent(btnExpenseReport)
                        .addGap(18, 18, 18)
                        .addComponent(btnNewExpense)))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        tabAdmin.addTab("Expenses", panelExpenses);

        panelPayments.setBackground(new java.awt.Color(215, 224, 223));

        tablePayments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Payment ID", "Name", "Cost"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tablePayments);

        btnPaymentReport.setText("Generate Payment Report");
        btnPaymentReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPaymentReportActionPerformed(evt);
            }
        });

        btnAddPayment.setText("Add a New Payment");
        btnAddPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPaymentActionPerformed(evt);
            }
        });

        btnManagePayment.setText("Manage an Existing Payment");
        btnManagePayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManagePaymentActionPerformed(evt);
            }
        });

        btnDeletePayment.setText("Delete Payment");
        btnDeletePayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePaymentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelPaymentsLayout = new javax.swing.GroupLayout(panelPayments);
        panelPayments.setLayout(panelPaymentsLayout);
        panelPaymentsLayout.setHorizontalGroup(
            panelPaymentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPaymentsLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(panelPaymentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnPaymentReport, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                    .addComponent(btnAddPayment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnManagePayment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDeletePayment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        panelPaymentsLayout.setVerticalGroup(
            panelPaymentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPaymentsLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(panelPaymentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelPaymentsLayout.createSequentialGroup()
                        .addComponent(btnPaymentReport)
                        .addGap(18, 18, 18)
                        .addComponent(btnAddPayment)
                        .addGap(18, 18, 18)
                        .addComponent(btnManagePayment)
                        .addGap(18, 18, 18)
                        .addComponent(btnDeletePayment)))
                .addContainerGap(70, Short.MAX_VALUE))
        );

        tabAdmin.addTab("Payments", panelPayments);

        tblPassengers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Passenger ID", "Name", "Email", "Phone Number"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPassengers);

        btnAddPassenger.setText("Add a New Passenger");
        btnAddPassenger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPassengerActionPerformed(evt);
            }
        });

        btnManagePassenger.setText("Manage Passenger");
        btnManagePassenger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManagePassengerActionPerformed(evt);
            }
        });

        btnDeletePassenger.setText("Delete Passenger");
        btnDeletePassenger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePassengerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelPassengerLayout = new javax.swing.GroupLayout(panelPassenger);
        panelPassenger.setLayout(panelPassengerLayout);
        panelPassengerLayout.setHorizontalGroup(
            panelPassengerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPassengerLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(panelPassengerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAddPassenger, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                    .addComponent(btnManagePassenger, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDeletePassenger, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 544, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );
        panelPassengerLayout.setVerticalGroup(
            panelPassengerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPassengerLayout.createSequentialGroup()
                .addContainerGap(45, Short.MAX_VALUE)
                .addGroup(panelPassengerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelPassengerLayout.createSequentialGroup()
                        .addComponent(btnAddPassenger)
                        .addGap(18, 18, 18)
                        .addComponent(btnManagePassenger)
                        .addGap(18, 18, 18)
                        .addComponent(btnDeletePassenger))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(68, 68, 68))
        );

        tabAdmin.addTab("Passenger", panelPassenger);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabAdmin, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabAdmin)
        );

        setSize(new java.awt.Dimension(923, 384));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddRouteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRouteActionPerformed
        AddRouteGUI addRouteGUI = new AddRouteGUI(this.database, this);
        addRouteGUI.setVisible(true);
    }//GEN-LAST:event_btnAddRouteActionPerformed

    private void tabAdminStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabAdminStateChanged
        // refresh the appropriate table based on the selected tab
        int selectedTab = tabAdmin.getSelectedIndex();
        if (selectedTab == 0) { // bus tab
            populateBusTable();
        } else if (selectedTab == 2) { // route tab
            populateRouteTable();
        }
    }//GEN-LAST:event_tabAdminStateChanged

    private void btnAddBusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddBusActionPerformed
        AddBusGUI addBusGUI = new AddBusGUI(this.database, this);
        addBusGUI.setVisible(true);
    }//GEN-LAST:event_btnAddBusActionPerformed

    private void btnManageBusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManageBusActionPerformed
        ManageBusGUI manageBusGUI = new ManageBusGUI(this.database, this);
        manageBusGUI.setVisible(true);
    }//GEN-LAST:event_btnManageBusActionPerformed
    
    private void btnExpenseReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExpenseReportActionPerformed
        new ExpenseReportGUI(database).setVisible(true);
    }//GEN-LAST:event_btnExpenseReportActionPerformed

    private void btnNewExpenseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewExpenseActionPerformed
        new AddExpenseGUI(database, this).setVisible(true);
    }//GEN-LAST:event_btnNewExpenseActionPerformed

    private void btnAddScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddScheduleActionPerformed
        AddScheduleGUI addScheduleGUI = new AddScheduleGUI(this.database, this);
        addScheduleGUI.setVisible(true);
    }//GEN-LAST:event_btnAddScheduleActionPerformed
    
    private void btnManageScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManageScheduleActionPerformed
        ManageScheduleGUI manageScheduleGUI = new ManageScheduleGUI(this.database, this);
        manageScheduleGUI.setVisible(true);
    }//GEN-LAST:event_btnManageScheduleActionPerformed
    
    private void btnRemoveScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveScheduleActionPerformed
        // get the selected row from the schedule table
        int selectedRow = tableSchedule.getSelectedRow();
        
        if (selectedRow >= 0) {
            // get the schedule name from the selected row
            String scheduleName = (String) tableSchedule.getValueAt(selectedRow, 0);
            
            // find the schedule by name
            Schedule schedule = database.getScheduleManager().getScheduleByName(scheduleName);
            
            if (schedule != null) {
                // confirm deletion
                int confirm = javax.swing.JOptionPane.showConfirmDialog(this,
                        "Are you sure you want to delete schedule '" + schedule.getName() + "'?",
                        "Confirm Deletion",
                        javax.swing.JOptionPane.YES_NO_OPTION);
                
                if (confirm == javax.swing.JOptionPane.YES_OPTION) {
                    // remove the schedule
                    database.getScheduleManager().removeSchedule(schedule);
                    
                    // refresh the schedule table
                    populateScheduleTable();
                    
                    javax.swing.JOptionPane.showMessageDialog(this, 
                            "Schedule deleted successfully!", 
                            "Success", 
                            javax.swing.JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } else {
            // if no row is selected, show a message
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Please select a schedule to delete.", 
                "No Schedule Selected", 
                javax.swing.JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnRemoveScheduleActionPerformed

    private void btnPaymentReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPaymentReportActionPerformed
        new PaymentReportGUI(database).setVisible(true);
    }//GEN-LAST:event_btnPaymentReportActionPerformed

    private void btnAddPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPaymentActionPerformed
        new AddPaymentGUI(database, this).setVisible(true);
    }//GEN-LAST:event_btnAddPaymentActionPerformed

    private void btnManagePaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManagePaymentActionPerformed
        new ManagePaymentGUI(database, this).setVisible(true);
    }//GEN-LAST:event_btnManagePaymentActionPerformed
    
    private void btnManageRouteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManageRouteActionPerformed
        ManageRouteGUI manageRouteGUI = new ManageRouteGUI(this.database, this);
        manageRouteGUI.setVisible(true);
    }//GEN-LAST:event_btnManageRouteActionPerformed
    
    private void btnDeleteRouteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteRouteActionPerformed
        // get the selected route from the table
        int selectedRow = tableRoute.getSelectedRow();
        
        if (selectedRow >= 0) {
            // get the route ID from the selected row
            String routeId = (String) tableRoute.getValueAt(selectedRow, 0);
            
            // find the route by ID
            Route selectedRoute = database.getRouteManager().getRouteById(routeId);
            
            if (selectedRoute != null) {
                // confirm deletion
                int confirm = javax.swing.JOptionPane.showConfirmDialog(this,
                        "Are you sure you want to delete route '" + selectedRoute.getName() + "'?",
                        "Confirm Deletion",
                        javax.swing.JOptionPane.YES_NO_OPTION);
                
                if (confirm == javax.swing.JOptionPane.YES_OPTION) {
                    // check if the route has a bus assigned to it
                    bus.Bus assignedBus = database.getDispatcher().getBusForRoute(selectedRoute);
                    
                    if (assignedBus != null) {
                        // remove the bus assignment first
                        database.getDispatcher().removeBusFromRoute(selectedRoute);
                        
                        // refresh the bus table
                        populateBusTable();
                    }
                    
                    // remove the route
                    database.getRouteManager().removeRoute(selectedRoute);
                    
                    // refresh the route table
                    populateRouteTable();
                    
                    javax.swing.JOptionPane.showMessageDialog(this, 
                            "Route deleted successfully!", 
                            "Success", 
                            javax.swing.JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Please select a route to delete.", 
                "No Route Selected", 
                javax.swing.JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteRouteActionPerformed
    
    private void btnRouteAssignmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRouteAssignmentActionPerformed
        // get the selected route from the table
        int selectedRow = tableRoute.getSelectedRow();
        
        if (selectedRow >= 0) {
            // get the route ID from the selected row
            String routeId = (String) tableRoute.getValueAt(selectedRow, 0);
            
            // find the route by ID
            Route selectedRoute = database.getRouteManager().getRouteById(routeId);
            
            if (selectedRoute != null) {
                // create a custom dialog for route assignment options
                javax.swing.JDialog dialog = new javax.swing.JDialog(this, "Route Assignment", true);
                dialog.setLayout(new java.awt.BorderLayout());
                
                // create a panel for the message
                javax.swing.JPanel messagePanel = new javax.swing.JPanel();
                messagePanel.setBackground(new java.awt.Color(215, 224, 223));
                messagePanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(15, 15, 15, 15));
                
                javax.swing.JLabel messageLabel = new javax.swing.JLabel("Select an action for route " + selectedRoute.getName() + ":");
                messageLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
                messagePanel.add(messageLabel);
                
                // create a panel for the buttons
                javax.swing.JPanel buttonPanel = new javax.swing.JPanel();
                buttonPanel.setLayout(new java.awt.GridLayout(5, 1, 0, 5));
                buttonPanel.setBackground(new java.awt.Color(215, 224, 223));
                buttonPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 15, 15, 15));
                
                // create styled buttons for each option
                String[] optionTexts = {
                    "Assign Bus to Route",
                    "Unassign Bus from Route",
                    "Assign Driver to Bus",
                    "Unassign Driver from Bus",
                    "Cancel"
                };
                
                // variable to store the selected choice
                final int[] choice = {-1};
                
                for (int i = 0; i < optionTexts.length; i++) {
                    final int optionIndex = i;
                    javax.swing.JButton optionButton = new javax.swing.JButton(optionTexts[i]);
                    
                    // apply the same styling as other buttons
                    optionButton.setBackground(java.awt.Color.WHITE);
                    optionButton.setForeground(java.awt.Color.BLACK);
                    optionButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
                    optionButton.setOpaque(true);
                    optionButton.setBorderPainted(false);
                    optionButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    
                    // add hover effect
                    optionButton.addMouseListener(new java.awt.event.MouseAdapter() {
                        @Override
                        public void mouseEntered(java.awt.event.MouseEvent e) {
                            optionButton.setBackground(java.awt.Color.GREEN);
                        }
                        
                        @Override
                        public void mouseExited(java.awt.event.MouseEvent e) {
                            optionButton.setBackground(java.awt.Color.WHITE);
                        }
                    });
                    
                    // add action listener
                    optionButton.addActionListener(new java.awt.event.ActionListener() {
                        @Override
                        public void actionPerformed(java.awt.event.ActionEvent e) {
                            choice[0] = optionIndex;
                            dialog.dispose();
                        }
                    });
                    
                    buttonPanel.add(optionButton);
                }
                
                // add panels to dialog
                dialog.add(messagePanel, java.awt.BorderLayout.NORTH);
                dialog.add(buttonPanel, java.awt.BorderLayout.CENTER);
                
                // set dialog properties
                dialog.pack();
                dialog.setLocationRelativeTo(this);
                dialog.setResizable(false);
                
                // show dialog and wait for user selection
                dialog.setVisible(true);
                
                // get the user's choice
                int choice_value = choice[0];
                
                switch (choice_value) {
                    case 0: // assign bus to route
                        assignBusToRoute(selectedRoute);
                        break;
                    case 1: // unassign bus from route
                        unassignBusFromRoute(selectedRoute);
                        break;
                    case 2: // assign driver to bus
                        assignDriverToBus(selectedRoute);
                        break;
                    case 3: // unassign driver from bus
                        unassignDriverFromBus(selectedRoute);
                        break;
                    default:
                        // Cancel or closed dialog
                        break;
                }
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Please select a route first.", 
                "No Route Selected", 
                javax.swing.JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnRouteAssignmentActionPerformed
    
    /**
     * assigns a bus to a route
     * @param selectedRoute the route to assign a bus to
     */
    private void assignBusToRoute(Route selectedRoute) {
        // show input dialog for bus ID
        String busIdStr = javax.swing.JOptionPane.showInputDialog(
            this,
            "Enter the ID of the bus to assign to route " + selectedRoute.getName() + ":",
            "Assign Bus to Route",
            javax.swing.JOptionPane.QUESTION_MESSAGE);
        
        if (busIdStr != null && !busIdStr.trim().isEmpty()) {
            try {
                // parse the bus ID
                int busId = Integer.parseInt(busIdStr.trim());
            
                // find the bus by ID
                bus.Bus bus = database.getBusManager().findBusById(busId);
                
                if (bus != null) {
                    // check if the bus is available
                    if (!bus.getStatus().equals("Available")) {
                        javax.swing.JOptionPane.showMessageDialog(this, 
                            "Bus " + busId + " is not available for assignment. Current status: " + bus.getStatus(), 
                            "Bus Not Available", 
                            javax.swing.JOptionPane.WARNING_MESSAGE);
                        return;
                    }
                    
                    // assign the bus to the route
                    boolean success = database.getDispatcher().assignBusToRoute(bus, selectedRoute);
                    
                    if (success) {
                        javax.swing.JOptionPane.showMessageDialog(this, 
                            "Bus " + bus.getBusId() + " assigned to route " + selectedRoute.getName() + " successfully!", 
                            "Assignment Successful", 
                            javax.swing.JOptionPane.INFORMATION_MESSAGE);
                        
                        // refresh the bus table
                        populateBusTable();
                    } else {
                        javax.swing.JOptionPane.showMessageDialog(this, 
                            "Failed to assign bus to route. The bus or route may already be assigned.", 
                            "Assignment Failed", 
                            javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    javax.swing.JOptionPane.showMessageDialog(this, 
                        "Bus with ID " + busId + " not found.", 
                        "Bus Not Found", 
                        javax.swing.JOptionPane.WARNING_MESSAGE);
                }
            } catch (NumberFormatException e) {
                javax.swing.JOptionPane.showMessageDialog(this, 
                    "Please enter a valid bus ID (numeric value).", 
                    "Invalid Input", 
                    javax.swing.JOptionPane.WARNING_MESSAGE);
            }
        }
    }
    
    /**
     * assigns a driver to the bus assigned to a route
     * @param selectedRoute the route whose bus will get a driver assigned
     */
    private void assignDriverToBus(Route selectedRoute) {
        // get the bus assigned to this route
        bus.Bus bus = database.getDispatcher().getBusForRoute(selectedRoute);
        
        if (bus == null) {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "No bus is assigned to route " + selectedRoute.getName() + ". Please assign a bus first.", 
                "No Bus Assigned", 
                javax.swing.JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // check if the bus already has a driver
        employees.Driver currentDriver = database.getDispatcher().getDriverForBus(bus);
        if (currentDriver != null) {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "This bus already has a driver assigned: " + currentDriver.getName(), 
                "Driver Already Assigned", 
                javax.swing.JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // get all available drivers
        java.util.ArrayList<employees.Driver> availableDrivers = new java.util.ArrayList<>();
        for (employees.Employee employee : database.getEmployeeManagement().getAllEmployees()) {
            if (employee instanceof employees.Driver) {
                employees.Driver driver = (employees.Driver) employee;
                if (driver.getAvailability()) {
                    availableDrivers.add(driver);
                }
            }
        }
        
        // if there are no available drivers, show a message
        if (availableDrivers.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "No available drivers found.", 
                "Assign Driver", 
                javax.swing.JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        // create a dialog to select a driver
        String[] driverNames = new String[availableDrivers.size()];
        for (int i = 0; i < availableDrivers.size(); i++) {
            driverNames[i] = availableDrivers.get(i).getName() + " (ID: " + availableDrivers.get(i).getEmployeeID() + ")";
        }
        
        String selectedDriverName = (String) javax.swing.JOptionPane.showInputDialog(
            this,
            "Select a driver to assign to bus " + bus.getMake() + " " + bus.getModel() + " (ID: " + bus.getBusId() + ") for route " + selectedRoute.getName() + ":",
            "Assign Driver",
            javax.swing.JOptionPane.QUESTION_MESSAGE,
            null,
            driverNames,
            driverNames[0]);
        
        // if a driver was selected, assign them to the bus
        if (selectedDriverName != null) {
            int selectedIndex = -1;
            for (int i = 0; i < driverNames.length; i++) {
                if (driverNames[i].equals(selectedDriverName)) {
                    selectedIndex = i;
                    break;
                }
            }
            
            if (selectedIndex >= 0) {
                employees.Driver selectedDriver = availableDrivers.get(selectedIndex);
                boolean success = database.getDispatcher().assignDriverToBus(selectedDriver, bus);
                
                if (success) {
                    javax.swing.JOptionPane.showMessageDialog(this, 
                        "Driver " + selectedDriver.getName() + " assigned to bus successfully.", 
                        "Assign Driver", 
                        javax.swing.JOptionPane.INFORMATION_MESSAGE);
                    
                    // refresh the employee table and route table
                    populateEmployeeTable();
                    populateRouteTable();
                } else {
                    javax.swing.JOptionPane.showMessageDialog(this, 
                        "Failed to assign driver to bus.", 
                        "Assign Driver", 
                        javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }
    
    /**
     * unassigns a bus from a route
     * @param selectedRoute the route to unassign a bus from
     */
    private void unassignBusFromRoute(Route selectedRoute) {
        // get the bus assigned to this route
        bus.Bus bus = database.getDispatcher().getBusForRoute(selectedRoute);
        
        if (bus == null) {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "No bus is assigned to route " + selectedRoute.getName() + ".", 
                "No Bus Assigned", 
                javax.swing.JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // confirm unassignment
        int confirm = javax.swing.JOptionPane.showConfirmDialog(this,
            "Are you sure you want to unassign bus " + bus.getMake() + " " + bus.getModel() + " (ID: " + bus.getBusId() + ") from route " + selectedRoute.getName() + "?",
            "Confirm Unassignment",
            javax.swing.JOptionPane.YES_NO_OPTION);
        
        if (confirm == javax.swing.JOptionPane.YES_OPTION) {
            // check if the bus has a driver assigned
            employees.Driver driver = database.getDispatcher().getDriverForBus(bus);
            if (driver != null) {
                // ask if the driver should also be unassigned
                int confirmDriver = javax.swing.JOptionPane.showConfirmDialog(this,
                    "This bus has driver " + driver.getName() + " assigned to it. Unassign the driver as well?",
                    "Driver Assigned",
                    javax.swing.JOptionPane.YES_NO_OPTION);
                
                if (confirmDriver == javax.swing.JOptionPane.YES_OPTION) {
                    // unassign the driver first
                    database.getDispatcher().removeDriverFromBus(bus);
                    
                    // refresh the employee table
                    populateEmployeeTable();
                }
            }
            
            // remove the bus from the route
            boolean success = database.getDispatcher().removeBusFromRoute(selectedRoute);
            
            if (success) {
                javax.swing.JOptionPane.showMessageDialog(this, 
                    "Bus unassigned from route successfully.", 
                    "Unassign Bus", 
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);
                
                // refresh the bus table
                populateBusTable();
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, 
                    "Failed to unassign bus from route.", 
                    "Unassign Bus", 
                    javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    /**
     * unassigns a driver from the bus assigned to a route
     * @param selectedRoute the route whose bus will have its driver unassigned
     */
    private void unassignDriverFromBus(Route selectedRoute) {
        // get the bus assigned to this route
        bus.Bus bus = database.getDispatcher().getBusForRoute(selectedRoute);
        
        if (bus == null) {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "No bus is assigned to route " + selectedRoute.getName() + ".", 
                "No Bus Assigned", 
                javax.swing.JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // check if the bus has a driver
        employees.Driver driver = database.getDispatcher().getDriverForBus(bus);
        if (driver == null) {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "No driver is assigned to the bus for route " + selectedRoute.getName() + ".", 
                "No Driver Assigned", 
                javax.swing.JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // confirm unassignment
        int confirm = javax.swing.JOptionPane.showConfirmDialog(this,
            "Are you sure you want to unassign driver " + driver.getName() + " from bus " + bus.getMake() + " " + bus.getModel() + " (ID: " + bus.getBusId() + ")?",
            "Confirm Unassignment",
            javax.swing.JOptionPane.YES_NO_OPTION);
        
        if (confirm == javax.swing.JOptionPane.YES_OPTION) {
            // remove the driver from the bus
            boolean success = database.getDispatcher().removeDriverFromBus(bus);
            
            if (success) {
                javax.swing.JOptionPane.showMessageDialog(this, 
                    "Driver unassigned from bus successfully.", 
                    "Unassign Driver", 
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);
                
                // refresh the employee table and route table
                populateEmployeeTable();
                populateRouteTable();
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, 
                    "Failed to unassign driver from bus.", 
                    "Unassign Driver", 
                    javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void btnDeleteBusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteBusActionPerformed
        // get the selected bus from the table
        int selectedRow = tableBus.getSelectedRow();
        
        if (selectedRow >= 0) {
            // get the bus ID from the selected row
            int busId = (int) tableBus.getValueAt(selectedRow, 0);
            
            // find the bus by ID
            bus.Bus selectedBus = database.getBusManager().findBusById(busId);
            
            if (selectedBus != null) {
                // confirm deletion
                int confirm = javax.swing.JOptionPane.showConfirmDialog(this,
                        "Are you sure you want to delete bus #" + selectedBus.getBusId() + " (" + 
                        selectedBus.getYear() + " " + selectedBus.getMake() + " " + selectedBus.getModel() + ")?",
                        "Confirm Deletion",
                        javax.swing.JOptionPane.YES_NO_OPTION);
                
                if (confirm == javax.swing.JOptionPane.YES_OPTION) {
                    // check if the bus is assigned to a route
                    Route assignedRoute = database.getDispatcher().getRouteForBus(selectedBus);
                    
                    if (assignedRoute != null) {
                        // remove the bus assignment first
                        database.getDispatcher().removeBusFromRoute(assignedRoute);
                    }
                    
                    // remove the bus
                    database.getBusManager().removeBus(selectedBus);
                    
                    // refresh the bus table
                    populateBusTable();
                    
                    javax.swing.JOptionPane.showMessageDialog(this, 
                            "Bus deleted successfully!", 
                            "Success", 
                            javax.swing.JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Please select a bus to delete.", 
                "No Bus Selected", 
                javax.swing.JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteBusActionPerformed

    private void btnAddPassengerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPassengerActionPerformed
        new AddPassengerGUI(database, this).setVisible(true);
    }//GEN-LAST:event_btnAddPassengerActionPerformed

    private void btnManagePassengerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManagePassengerActionPerformed
        new ManagePassengerGUI(database, this).setVisible(true);
    }//GEN-LAST:event_btnManagePassengerActionPerformed
    
    private void btnAddDepotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddDepotActionPerformed
        // show input dialog for depot address
        String address = javax.swing.JOptionPane.showInputDialog(
            this,
            "Enter the address for the new depot:",
            "Add New Depot",
            javax.swing.JOptionPane.QUESTION_MESSAGE);
        
        if (address != null && !address.trim().isEmpty()) {
            // create a new depot
            depot.Depot newDepot = new depot.Depot(address.trim());
            
            // add the depot to the depot manager
            database.getDepotManager().addDepot(newDepot);
            
            // refresh the depot table
            populateDepotTable();
            
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Depot added successfully! Depot ID: " + newDepot.getDepotId(), 
                "Success", 
                javax.swing.JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnAddDepotActionPerformed
    
    private void btnDeleteDepotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteDepotActionPerformed
        // get the selected depot from the table
        int selectedRow = tableDepot.getSelectedRow();
        
        if (selectedRow >= 0) {
            // get the depot ID from the selected row
            int depotId = (int) tableDepot.getValueAt(selectedRow, 0);
            
            // find the depot by ID
            depot.Depot selectedDepot = database.getDepotManager().findDepotById(depotId);
            
            if (selectedDepot != null) {
                // confirm deletion
                int confirm = javax.swing.JOptionPane.showConfirmDialog(this,
                        "Are you sure you want to delete depot #" + selectedDepot.getDepotId() + " at " + 
                        selectedDepot.getDepotAddress() + "?",
                        "Confirm Deletion",
                        javax.swing.JOptionPane.YES_NO_OPTION);
                
                if (confirm == javax.swing.JOptionPane.YES_OPTION) {
                    // check if the depot has buses assigned to it
                    java.util.ArrayList<bus.Bus> assignedBuses = selectedDepot.getBuses();
                    
                    if (!assignedBuses.isEmpty()) {
                        // show warning about assigned buses
                        int confirmWithBuses = javax.swing.JOptionPane.showConfirmDialog(this,
                                "This depot has " + assignedBuses.size() + " buses assigned to it. " +
                                "Deleting the depot will unassign all buses. Continue?",
                                "Buses Assigned",
                                javax.swing.JOptionPane.YES_NO_OPTION);
                        
                        if (confirmWithBuses != javax.swing.JOptionPane.YES_OPTION) {
                            return;
                        }
                    }
                    
                    // remove the depot
                    database.getDepotManager().removeDepot(selectedDepot);
                    
                    // refresh the depot table
                    populateDepotTable();
                    
                    javax.swing.JOptionPane.showMessageDialog(this, 
                            "Depot deleted successfully!", 
                            "Success", 
                            javax.swing.JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Please select a depot to delete.", 
                "No Depot Selected", 
                javax.swing.JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteDepotActionPerformed
    
    private void btnAssignBusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignBusActionPerformed
        // get the selected depot from the table
        int selectedRow = tableDepot.getSelectedRow();
        
        if (selectedRow >= 0) {
            // get the depot ID from the selected row
            int depotId = (int) tableDepot.getValueAt(selectedRow, 0);
            
            // find the depot by ID
            depot.Depot selectedDepot = database.getDepotManager().findDepotById(depotId);
            
            if (selectedDepot != null) {
                // show input dialog for bus ID
                String busIdStr = javax.swing.JOptionPane.showInputDialog(
                    this,
                    "Enter the ID of the bus to assign to depot #" + selectedDepot.getDepotId() + ":",
                    "Assign Bus to Depot",
                    javax.swing.JOptionPane.QUESTION_MESSAGE);
                
            if (busIdStr != null && !busIdStr.trim().isEmpty()) {
                    // parse the bus ID
                    int busId = Integer.parseInt(busIdStr.trim());

                    // find the bus by ID
                    bus.Bus bus = database.getBusManager().findBusById(busId);

                    if (bus != null) {
                        // assign the bus to the depot
                        boolean success = database.getDepotManager().assignBusToDepot(depotId, bus);

                        if (success) {
                            javax.swing.JOptionPane.showMessageDialog(this, 
                                "Bus " + bus.getBusId() + " assigned to depot #" + depotId + " successfully!", 
                                "Assignment Successful", 
                                javax.swing.JOptionPane.INFORMATION_MESSAGE);

                            // refresh the depot table
                            populateDepotTable();
                        } else {
                            javax.swing.JOptionPane.showMessageDialog(this, 
                                "Failed to assign bus to depot. The bus may already be assigned to this depot.", 
                                "Assignment Failed", 
                                javax.swing.JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        javax.swing.JOptionPane.showMessageDialog(this, 
                            "Bus with ID " + busId + " not found.", 
                            "Bus Not Found", 
                            javax.swing.JOptionPane.WARNING_MESSAGE);
                    }
                }
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Please select a depot to assign a bus to.", 
                "No Depot Selected", 
                javax.swing.JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnAssignBusActionPerformed
    
    private void btnUnassignBusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUnassignBusActionPerformed
        // get the selected depot from the table
        int selectedRow = tableDepot.getSelectedRow();
        
        if (selectedRow >= 0) {
            // get the depot ID from the selected row
            int depotId = (int) tableDepot.getValueAt(selectedRow, 0);
            
            // find the depot by ID
            depot.Depot selectedDepot = database.getDepotManager().findDepotById(depotId);
            
            if (selectedDepot != null) {
                // get the buses assigned to this depot
                java.util.ArrayList<bus.Bus> assignedBuses = selectedDepot.getBuses();
                
                if (assignedBuses.isEmpty()) {
                    javax.swing.JOptionPane.showMessageDialog(this, 
                        "This depot has no buses assigned to it.", 
                        "No Buses Assigned", 
                        javax.swing.JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
                
                // create a list of bus IDs for the combo box
                String[] busOptions = new String[assignedBuses.size()];
                for (int i = 0; i < assignedBuses.size(); i++) {
                    bus.Bus bus = assignedBuses.get(i);
                    busOptions[i] = "Bus #" + bus.getBusId() + " (" + bus.getYear() + " " + 
                                    bus.getMake() + " " + bus.getModel() + ")";
                }
                
                // show selection dialog for which bus to unassign
                String selectedBusOption = (String) javax.swing.JOptionPane.showInputDialog(
                    this,
                    "Select the bus to unassign from depot #" + depotId + ":",
                    "Unassign Bus from Depot",
                    javax.swing.JOptionPane.QUESTION_MESSAGE,
                    null,
                    busOptions,
                    busOptions[0]);
                
                if (selectedBusOption != null) {
                    // find the index of the selected bus
                    int selectedBusIndex = -1;
                    for (int i = 0; i < busOptions.length; i++) {
                        if (busOptions[i].equals(selectedBusOption)) {
                            selectedBusIndex = i;
                            break;
                        }
                    }
                    
                    if (selectedBusIndex >= 0) {
                        // get the selected bus
                        bus.Bus selectedBus = assignedBuses.get(selectedBusIndex);
                        
                        // unassign the bus from the depot
                        boolean success = database.getDepotManager().removeBusFromDepot(depotId, selectedBus);
                        
                        if (success) {
                            javax.swing.JOptionPane.showMessageDialog(this, 
                                "Bus " + selectedBus.getBusId() + " unassigned from depot #" + depotId + " successfully!", 
                                "Unassignment Successful", 
                                javax.swing.JOptionPane.INFORMATION_MESSAGE);
                            
                            // refresh the depot table
                            populateDepotTable();
                        } else {
                            javax.swing.JOptionPane.showMessageDialog(this, 
                                "Failed to unassign bus from depot.", 
                                "Unassignment Failed", 
                                javax.swing.JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Please select a depot to unassign a bus from.", 
                "No Depot Selected", 
                javax.swing.JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnUnassignBusActionPerformed

    private void btnAddEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddEmployeeActionPerformed
        AddEmployeeGUI addEmployeeGUI = new AddEmployeeGUI(this.database, this);
        addEmployeeGUI.setVisible(true);
    }//GEN-LAST:event_btnAddEmployeeActionPerformed

    private void btnDeleteEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteEmployeeActionPerformed
        // get the selected employee from the table
        int selectedRow = tableEmployee.getSelectedRow();
        
        if (selectedRow >= 0) {
            // get the employee ID from the selected row
            String employeeId = (String) tableEmployee.getValueAt(selectedRow, 1);
            
            // find the employee by ID
            employees.Employee selectedEmployee = database.getEmployeeManagement().getEmployeeById(employeeId);
            
            if (selectedEmployee != null) {
                // confirm deletion
                int confirm = javax.swing.JOptionPane.showConfirmDialog(this,
                        "Are you sure you want to delete employee " + selectedEmployee.getName() + " (" + 
                        selectedEmployee.getEmployeeID() + ")?",
                        "Confirm Deletion",
                        javax.swing.JOptionPane.YES_NO_OPTION);
                
                if (confirm == javax.swing.JOptionPane.YES_OPTION) {
                    // remove the employee's login
                    login.LoginManager loginManager = database.getLoginManager();
                    java.util.ArrayList<login.Login> logins = loginManager.getLogins();
                    
                    // find and remove the login associated with this employee
                    for (int i = logins.size() - 1; i >= 0; i--) {
                        login.Login login = logins.get(i);
                        if (login.getEmployee() != null && login.getEmployee().getEmployeeID().equals(employeeId)) {
                            logins.remove(i);
                        }
                    }
                    
                    // save the updated logins
                    loginManager.saveLoginsToCSV();
                    
                    // delete the employee
                    database.getEmployeeManagement().deleteEmployee(selectedEmployee);
                    
                    // refresh the employee table
                    populateEmployeeTable();
                    
                    javax.swing.JOptionPane.showMessageDialog(this, 
                            "Employee deleted successfully!", 
                            "Success", 
                            javax.swing.JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Please select an employee to delete.", 
                "No Employee Selected", 
                javax.swing.JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteEmployeeActionPerformed

    private void btnUpdateEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateEmployeeActionPerformed
        ManageEmployeeGUI manageEmployeeGUI = new ManageEmployeeGUI(this.database, this);
        manageEmployeeGUI.setVisible(true);
    }//GEN-LAST:event_btnUpdateEmployeeActionPerformed

    private void btnDeletePassengerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePassengerActionPerformed
        // get the selected passenger from the table
        int selectedRow = tblPassengers.getSelectedRow();
        
        if (selectedRow >= 0) {
            // get the passenger ID from the selected row
            String passengerId = (String) tblPassengers.getValueAt(selectedRow, 0);
            
            // find the passenger by ID
            Passenger p = database.getPassengerManager().getPassengerById(passengerId);
            
            if (p != null) {
                // confirm deletion
                int confirm = javax.swing.JOptionPane.showConfirmDialog(this,
                        "Are you sure you want to delete passenger " + passengerId + " (" + 
                        p.getPassengerName() + ")?",
                        "Confirm Deletion",
                        javax.swing.JOptionPane.YES_NO_OPTION);
                
                if (confirm == javax.swing.JOptionPane.YES_OPTION) {
                                       
                    // remove the passenger
                    database.getPassengerManager().removePassenger(p);
                    
                    // refresh the bus table
                    populatePassengerTable();
                    
                    javax.swing.JOptionPane.showMessageDialog(this, 
                            "Passenger deleted successfully!", 
                            "Success", 
                            javax.swing.JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Please select a passenger to delete.", 
                "No passenger selected", 
                javax.swing.JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnDeletePassengerActionPerformed
    
    private void formWindowClosing(java.awt.event.WindowEvent evt) {
        // save data to CSV when window is closed
        database.saveData();
        // dispose the window
        dispose();
    }

    private void btnDeletePaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePaymentActionPerformed
        // get the selected payment from the table
        int selectedRow = tablePayments.getSelectedRow();
        
        if (selectedRow >= 0) {
            // get the payment ID from the selected row
            int paymentId = (int) tablePayments.getValueAt(selectedRow, 0);
            
            // find the payment by ID
            Payment payment = database.getPaymentManager().findPaymentById(paymentId);
            
            if (payment != null) {
                // confirm deletion
                int confirm = javax.swing.JOptionPane.showConfirmDialog(this,
                        "Are you sure you want to delete payment #" + paymentId + "?",
                        "Confirm Deletion",
                        javax.swing.JOptionPane.YES_NO_OPTION);
                
                if (confirm == javax.swing.JOptionPane.YES_OPTION) {
                                        
                    // remove the payment
                    database.getPaymentManager().removePayment(payment);
                    
                    // refresh the payment table
                    populatePaymentsTable();
                    
                    javax.swing.JOptionPane.showMessageDialog(this, 
                            "Payment deleted successfully!", 
                            "Success", 
                            javax.swing.JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Please select a payment to delete.", 
                "No Payment Selected", 
                javax.swing.JOptionPane.WARNING_MESSAGE);
        }
                      
        database.getPaymentManager().savePaymentsToCSV();
        
    }//GEN-LAST:event_btnDeletePaymentActionPerformed
    
    /**
     * populates the bus table with data from the bus manager
     * @author Adrian Zielinski
     */
    public void populateBusTable() {
        if (database == null || database.getBusManager() == null) {
            return;
        }
        
        // get all buses from the BusManager
        java.util.ArrayList<bus.Bus> buses = database.getBusManager().getAllBuses();
        
        // create a table model with the appropriate columns
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) tableBus.getModel();
        
        // clear existing rows
        model.setRowCount(0);
        
        // add each bus to the table
        for (bus.Bus bus : buses) {
            model.addRow(new Object[]{
                bus.getBusId(),
                bus.getYear() + "/" + bus.getMake() + "/" + bus.getModel(),
                bus.getMileage(),
                bus.getCapacity(),
                bus.getStatus()
            });
        }
    }
    
    /**
     * populates the schedule table with data from the schedule manager
     */
    public void populateScheduleTable() {
        DefaultTableModel model = (DefaultTableModel) tableSchedule.getModel();
        model.setRowCount(0); // clear existing rows
        
        ArrayList<Schedule> schedules = database.getScheduleManager().getSchedules();
        
        for (Schedule schedule : schedules) {
            String name = schedule.getName();
            String routeName = schedule.getRoute() != null ? schedule.getRoute().getName() : "N/A";
            String startTime = formatTime(schedule.getStartTime());
            
            // format departure times as comma-separated list
            String departureTimes = "";
            if (schedule.getDepartureTimes() != null && !schedule.getDepartureTimes().isEmpty()) {
                for (int i = 0; i < schedule.getDepartureTimes().size(); i++) {
                    departureTimes += formatTime(schedule.getDepartureTimes().get(i));
                    if (i < schedule.getDepartureTimes().size() - 1) {
                        departureTimes += ", ";
                    }
                }
            } else {
                departureTimes = "N/A";
            }
            
            // format stops as comma-separated list
            String stops = "";
            if (schedule.getRoute() != null && schedule.getRoute().getStops() != null && 
                !schedule.getRoute().getStops().isEmpty()) {
                for (int i = 0; i < schedule.getRoute().getStops().size(); i++) {
                    stops += schedule.getRoute().getStops().get(i).getName();
                    if (i < schedule.getRoute().getStops().size() - 1) {
                        stops += ", ";
                    }
                }
            } else {
                stops = "N/A";
            }
            
            model.addRow(new Object[]{name, routeName, startTime, departureTimes, stops});
        }
        
        // Set column widths for the schedule table
        javax.swing.table.TableColumnModel columnModel = tableSchedule.getColumnModel();
        
        // Set preferred widths for each column
        columnModel.getColumn(0).setPreferredWidth(80);  // Name column
        columnModel.getColumn(1).setPreferredWidth(80);  // Route column
        columnModel.getColumn(2).setPreferredWidth(60);  // Start Time column
        columnModel.getColumn(3).setPreferredWidth(120); // Departure Times column
        columnModel.getColumn(4).setPreferredWidth(180); // Stops column
        
        // Optionally set minimum and maximum widths to control resizing
        for (int i = 0; i < columnModel.getColumnCount(); i++) {
            javax.swing.table.TableColumn column = columnModel.getColumn(i);
            column.setMinWidth(50);  // Minimum width for all columns
            
            // Set maximum width based on column index
            if (i == 0 || i == 1) {
                column.setMaxWidth(100);  // Name and Route columns
            } else if (i == 2) {
                column.setMaxWidth(80);   // Start Time column
            }
        }
    }
    
    /**
     * formats a double time value to a string in the format HH:MM
     * @param time the time as a double
     * @return the formatted time string
     */
    private String formatTime(double time) {
        int hours = (int) time;
        int minutes = (int) (((time - hours) * 100) + 0.5);
        
        return String.format("%02d:%02d", hours, minutes);
    }
    
    /**
     * populates the route table with data from the route manager
     * @author Adrian Zielinski
     */
    public void populateRouteTable() {
        if (database == null || database.getRouteManager() == null) {
            return;
        }
        
        // get all routes from the RouteManager
        java.util.ArrayList<Route> routes = database.getRouteManager().getRoutes();
        
        // create a table model with the appropriate columns
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) tableRoute.getModel();
        
        // clear existing rows
        model.setRowCount(0);
        
        // add each route to the table
        for (Route route: routes) {
            // get the bus assigned to this route
            bus.Bus assignedBus = database.getDispatcher().getBusForRoute(route);
            String busInfo = "Not Assigned";
            String driverInfo = "Not Assigned";
            
            if (assignedBus != null) {
                busInfo = "ID: " + assignedBus.getBusId();
                
                // get the driver assigned to this bus
                employees.Driver assignedDriver = database.getDispatcher().getDriverForBus(assignedBus);
                if (assignedDriver != null) {
                    driverInfo = "ID: " + assignedDriver.getEmployeeID();
                }
            }
            
            model.addRow(new Object[]{
                route.getRouteID(),
                route.getName(),
                busInfo,
                driverInfo
            });
        }
        
        // set column widths for the route table
        javax.swing.table.TableColumnModel columnModel = tableRoute.getColumnModel();
        
        // make the Route ID column smaller
        columnModel.getColumn(0).setPreferredWidth(60);  // Route ID column
        columnModel.getColumn(1).setPreferredWidth(200); // Name column
        
        // set minimum and maximum widths to control resizing
        columnModel.getColumn(0).setMinWidth(50);
        columnModel.getColumn(0).setMaxWidth(80);  // Restrict maximum width for Route ID
    }
    
    /**
     * populates the depot table with data from the depot manager
     * @author Adrian Zielinski
     */
    private void populateDepotTable() {
        if (database == null || database.getDepotManager() == null) {
            return;
        }
        
        // get all depots from the DepotManager
        java.util.ArrayList<depot.Depot> depots = database.getDepotManager().getAllDepots();
        
        // create a table model with the appropriate columns
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) tableDepot.getModel();
        
        // clear existing rows
        model.setRowCount(0);
        
        // add each depot to the table
        for (depot.Depot depot: depots) {
            model.addRow(new Object[]{
                depot.getDepotId(),
                depot.getDepotAddress()
            });
        }
        
        // set column widths for the depot table
        javax.swing.table.TableColumnModel columnModel = tableDepot.getColumnModel();
        
        // make the Depot ID column smaller
        columnModel.getColumn(0).setPreferredWidth(60);  // depot ID column
        columnModel.getColumn(1).setPreferredWidth(200); // address column
        
        // set minimum and maximum widths to control resizing
        columnModel.getColumn(0).setMinWidth(50);
        columnModel.getColumn(0).setMaxWidth(80);  // restrict maximum width for Depot ID
    }
    
    /**
     * populates the employee table with data from EmployeeManagement
     * @author Adrian Zielinski
     */
    public void populateEmployeeTable() {
        if (database == null || database.getEmployeeManagement() == null) {
            return;
        }
        
        // get all employees from EmployeeManagement
        java.util.ArrayList<employees.Employee> employees = database.getEmployeeManagement().getAllEmployees();
        
        // create a table model with the appropriate columns
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) tableEmployee.getModel();
        
        // clear existing rows
        model.setRowCount(0);
        
        // add each employee to the table
        for (employees.Employee employee: employees) {
            model.addRow(new Object[]{
                employee.getName(),
                employee.getEmployeeID(),
                employee.getJobTitle(),
                employee.getEmail(),
                employee.getPhoneNumber(),
                String.format("$%.2f", employee.getSalary())

            });
        }
    }
    
    /**
     * populates the expenses table
     * @author George Candal
     */
    public void populateExpensesTable() {
        if (database == null || database.getAccounting() == null) {
            return;
        }
        
        // get all expenses from Accounting
        java.util.ArrayList<expenses.Expense> expenses = database.getAccounting().getAllExpenses();
        
        // create a table model with the appropriate columns
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) tableExpenses.getModel();
        
        // clear existing rows
        model.setRowCount(0);
        
        // add each payment to the table
        String entity = "";
        String entityID = "";
        
        for (expenses.Expense expense: expenses) {
            if (expense instanceof expenses.FuelCost) {
                entity = "Bus";
                entityID = String.valueOf(((expenses.FuelCost) expense).getBus().getBusId());
            } else if (expense instanceof expenses.MaintenanceCost) {
                entity = "Bus";
                entityID = String.valueOf(((expenses.MaintenanceCost) expense).getBus().getBusId());                
            } else if (expense instanceof expenses.Salary) {
                entity = "Employee";
                entityID = ((expenses.Salary) expense).getEmployee().getEmployeeID();
            } else if (expense instanceof expenses.Utility) {
                entity = "Depot";
                entityID = String.valueOf(((expenses.Utility) expense).getDepot().getDepotId());
            }
            model.addRow(new Object[]{
                expense.getExpenseId(),
                expense.getClass().getSimpleName(),
                entity + " " + entityID,
                String.format("$%.2f", expense.getCost())

            });
        }
    }
    
    /**
     * populates the payments table with data from the payment manager
     * @author Adrian Zielinski
     */
    public void populatePaymentsTable() {
        if (database == null || database.getPaymentManager() == null) {
            return;
        }
        
        // get all payments from PaymentManager
        java.util.ArrayList<payment.Payment> payments = database.getPaymentManager().getAllPayments();
        
        // create a table model with the appropriate columns
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) tablePayments.getModel();
        
        // clear existing rows
        model.setRowCount(0);
        
        // add each payment to the table
        for (payment.Payment payment: payments) {
            model.addRow(new Object[]{
                payment.getPaymentId(),
                payment.getPassenger().getPassengerName(),
                String.format("$%.2f", payment.getPaymentAmount())

            });
        }
    }
    /**
     * populate the passenger table
     */
    public void populatePassengerTable() {
        if (database == null || database.getPaymentManager() == null) {
            return;
        }
        
        // get all passengers from PassengerManager
        java.util.ArrayList<Passenger> passengers = database.getPassengerManager().getPassengers();
        
        // create a table model with the appropriate columns
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) tblPassengers.getModel();
        
        // clear existing rows
        model.setRowCount(0);
        
        // add each payment to the table
        for (Passenger passenger: passengers) {
            model.addRow(new Object[]{
                passenger.getPassengerID(),
                passenger.getPassengerName(),
                passenger.getEmail(),
                passenger.getPhoneNumber()

            });
        }
    }

    private void styleAdminButtons() {
        Color bg = Color.WHITE;
        Color fg = Color.BLACK;
        Color hover = Color.green; // Light green hover
        Font buttonFont = new Font("Segoe UI", Font.PLAIN, 12);
        Dimension buttonSize = new Dimension(160, 23);

        JButton[] buttons = {
            btnAddBus, btnManageBus, btnDeleteBus,
            btnAddDepot, btnDeleteDepot, btnAssignBus, btnUnassignBus,
            btnAddSchedule, btnRemoveSchedule, btnManageSchedule,
            btnAddRoute, btnManageRoute, btnDeleteRoute, btnRouteAssignment,
            btnAddEmployee, btnDeleteEmployee, btnUpdateEmployee,
            btnExpenseReport, btnPaymentReport,
            btnNewExpense, btnAddPayment, btnManagePayment, btnDeletePayment,
            btnAddPassenger, btnManagePassenger, btnDeletePassenger
        };

        for (JButton button : buttons) {
            button.setBackground(bg);
            button.setForeground(fg);
            button.setOpaque(true);
            button.setBorderPainted(false);
            button.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            button.setFont(buttonFont);
            button.setPreferredSize(buttonSize);

            button.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseEntered(MouseEvent e) {
                    button.setBackground(hover);
                }

                @Override
                public void mouseExited(MouseEvent e) {
                    button.setBackground(bg);
                }
            });
        }
    }

    private void customizeTabHeaders() {
    for (int i = 0; i < tabAdmin.getTabCount(); i++) {
        String title = tabAdmin.getTitleAt(i);
        tabAdmin.setTitleAt(i, ""); // remove default title

        JLabel tabLabel = new JLabel(title, SwingConstants.CENTER);
        tabLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        tabLabel.setForeground(new Color(215, 224, 223));
        tabLabel.setBorder(BorderFactory.createEmptyBorder(8, 16, 8, 16));
        tabLabel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        JPanel tabPanel = new JPanel(new BorderLayout());
        tabPanel.setOpaque(true);
        tabPanel.setBackground(new Color(16, 32, 47)); // default inactive color
        tabPanel.add(tabLabel, BorderLayout.CENTER);

        final int index = i;

        // Hover effect
        tabPanel.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                if (tabAdmin.getSelectedIndex() != index) {
                    tabPanel.setBackground(new Color(34, 50, 65)); // hover color
                }
            }

            @Override
            public void mouseExited(MouseEvent e) {
                if (tabAdmin.getSelectedIndex() != index) {
                    tabPanel.setBackground(new Color(16, 32, 47)); // default
                }
            }

            @Override
            public void mouseClicked(MouseEvent e) {
                tabAdmin.setSelectedIndex(index);
            }
        });

        tabAdmin.setTabComponentAt(index, tabPanel);
    }

    // Style selected tab on tab change
    tabAdmin.addChangeListener(e -> updateTabStyles());
    updateTabStyles(); // Apply to initial tab
    
}

    private void normalizeButtonFonts() {
    Font plainFont = new Font("Segoe UI", Font.PLAIN, 12); // or any preferred font
    JButton[] buttons = {
        btnAddBus, btnManageBus, btnDeleteBus,
        btnAddDepot, btnDeleteDepot, btnAssignBus, btnUnassignBus,
        btnAddSchedule, btnRemoveSchedule, btnManageSchedule,
        btnAddRoute, btnManageRoute, btnDeleteRoute, btnRouteAssignment,
        btnAddEmployee, btnDeleteEmployee, btnUpdateEmployee,
        btnExpenseReport, btnPaymentReport,
        btnNewExpense, btnAddPayment, btnManagePayment, btnDeletePayment,
        btnAddPassenger, btnManagePassenger, btnDeletePassenger
    };

    for (JButton btn : buttons) {
        btn.setFont(plainFont);
    }
}
    
    private void updateTabStyles() {
    for (int i = 0; i < tabAdmin.getTabCount(); i++) {
        Component c = tabAdmin.getTabComponentAt(i);
        if (c instanceof JPanel panel) {
            Component label = panel.getComponent(0);
            if (label instanceof JLabel tabLabel) {
                if (i == tabAdmin.getSelectedIndex()) {
                    panel.setBackground(new Color(0, 153, 0)); // active green
                    tabLabel.setForeground(Color.WHITE);
                    tabLabel.setFont(new Font("Segoe UI", Font.BOLD, 12));
                } else {
                    panel.setBackground(new Color(16, 32, 47));
                    tabLabel.setForeground(new Color(215, 224, 223));
                    tabLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
                }
            }
        }
    }
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddBus;
    private javax.swing.JButton btnAddDepot;
    private javax.swing.JButton btnAddEmployee;
    private javax.swing.JButton btnAddPassenger;
    private javax.swing.JButton btnAddPayment;
    private javax.swing.JButton btnAddRoute;
    private javax.swing.JButton btnAddSchedule;
    private javax.swing.JButton btnAssignBus;
    private javax.swing.JButton btnDeleteBus;
    private javax.swing.JButton btnDeleteDepot;
    private javax.swing.JButton btnDeleteEmployee;
    private javax.swing.JButton btnDeletePassenger;
    private javax.swing.JButton btnDeletePayment;
    private javax.swing.JButton btnDeleteRoute;
    private javax.swing.JButton btnExpenseReport;
    private javax.swing.JButton btnManageBus;
    private javax.swing.JButton btnManagePassenger;
    private javax.swing.JButton btnManagePayment;
    private javax.swing.JButton btnManageRoute;
    private javax.swing.JButton btnManageSchedule;
    private javax.swing.JButton btnNewExpense;
    private javax.swing.JButton btnPaymentReport;
    private javax.swing.JButton btnRemoveSchedule;
    private javax.swing.JButton btnRouteAssignment;
    private javax.swing.JButton btnUnassignBus;
    private javax.swing.JButton btnUpdateEmployee;
    private javax.swing.JScrollPane busScrollPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JPanel panelBus;
    private javax.swing.JPanel panelDepot;
    private javax.swing.JPanel panelEmployee;
    private javax.swing.JPanel panelExpenses;
    private javax.swing.JPanel panelPassenger;
    private javax.swing.JPanel panelPayments;
    private javax.swing.JPanel panelRoute;
    private javax.swing.JPanel panelSchedule;
    private javax.swing.JScrollPane routePane;
    private javax.swing.JScrollPane schedulePane;
    private javax.swing.JTabbedPane tabAdmin;
    private javax.swing.JTable tableBus;
    private javax.swing.JTable tableDepot;
    private javax.swing.JTable tableEmployee;
    private javax.swing.JTable tableExpenses;
    private javax.swing.JTable tablePayments;
    private javax.swing.JTable tableRoute;
    private javax.swing.JTable tableSchedule;
    private javax.swing.JTable tblPassengers;
    // End of variables declaration//GEN-END:variables
}
