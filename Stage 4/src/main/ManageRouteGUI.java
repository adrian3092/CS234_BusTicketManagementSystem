
package main;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 * GUI for managing an existing route
 * @author Adrian Zielinski
 */
public class ManageRouteGUI extends javax.swing.JFrame {
    
    private Database database;
    private AdminMenuGUI adminMenuGUI;
    private Route selectedRoute;
    private DefaultListModel<String> stopsListModel;
    
    /**
     * Creates new form ManageRouteGUI
     * @param database the database
     * @param adminMenuGUI the parent AdminMenuGUI
     */
    public ManageRouteGUI(Database database, AdminMenuGUI adminMenuGUI) {
        // initialize instance variables
        this.database = database;
        this.adminMenuGUI = adminMenuGUI;
        initComponents();
        
        // set focus setting on load
        setAutoRequestFocus(false);
        
        // initialize the list model for bus stops
        stopsListModel = new DefaultListModel<>();
        stopsList.setModel(stopsListModel);
        
        // populate the route combo box
        populateRouteComboBox();
        
        // style text fields
        applyTextFieldEffects(routeNameTxt, "Route Name");
        applyTextFieldEffects(stopNameTxt, "Stop Name");
        applyTextFieldEffects(distanceTxt, "Distance to Next Stop(miles)");

        // style buttons
        styleButton(addStopButton);
        styleButton(removeStopButton);
        styleButton(updateRouteButton);
        
        // style combo box
        styleComboBox(routeComboBox);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        manageRoutePanel = new javax.swing.JPanel();
        routeLabel = new javax.swing.JLabel();
        routeComboBox = new javax.swing.JComboBox<>();
        routeNameTxt = new javax.swing.JTextField();
        stopsLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        stopsList = new javax.swing.JList<>();
        addStopButton = new javax.swing.JButton();
        removeStopButton = new javax.swing.JButton();
        updateRouteButton = new javax.swing.JButton();
        stopNameTxt = new javax.swing.JTextField();
        distanceTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Manage Route");

        manageRoutePanel.setBackground(new java.awt.Color(215, 224, 223));

        routeLabel.setText("Select Route:");

        routeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                routeComboBoxActionPerformed(evt);
            }
        });

        routeNameTxt.setForeground(new java.awt.Color(153, 153, 153));
        routeNameTxt.setText("Route Name");

        stopsLabel.setText("Bus Stops:");

        jScrollPane1.setViewportView(stopsList);

        addStopButton.setText("Add Stop");
        addStopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStopButtonActionPerformed(evt);
            }
        });

        removeStopButton.setText("Remove Stop");
        removeStopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeStopButtonActionPerformed(evt);
            }
        });

        updateRouteButton.setText("Update Route");
        updateRouteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateRouteButtonActionPerformed(evt);
            }
        });

        stopNameTxt.setForeground(new java.awt.Color(153, 153, 153));
        stopNameTxt.setText("Stop Name");

        distanceTxt.setForeground(new java.awt.Color(153, 153, 153));
        distanceTxt.setText("Distance to Next Stop(miles)");

        javax.swing.GroupLayout manageRoutePanelLayout = new javax.swing.GroupLayout(manageRoutePanel);
        manageRoutePanel.setLayout(manageRoutePanelLayout);
        manageRoutePanelLayout.setHorizontalGroup(
            manageRoutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageRoutePanelLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(manageRoutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(manageRoutePanelLayout.createSequentialGroup()
                        .addGroup(manageRoutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(manageRoutePanelLayout.createSequentialGroup()
                                .addComponent(routeLabel)
                                .addGap(10, 10, 10)
                                .addComponent(routeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(stopsLabel))
                        .addGap(20, 20, 20))
                    .addGroup(manageRoutePanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(18, 18, 18)))
                .addGroup(manageRoutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addStopButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(removeStopButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(updateRouteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(distanceTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                    .addComponent(stopNameTxt)
                    .addComponent(routeNameTxt))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        manageRoutePanelLayout.setVerticalGroup(
            manageRoutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageRoutePanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(manageRoutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(manageRoutePanelLayout.createSequentialGroup()
                        .addComponent(routeNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(stopNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(distanceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(addStopButton)
                        .addGap(18, 18, 18)
                        .addComponent(removeStopButton)
                        .addGap(18, 18, 18)
                        .addComponent(updateRouteButton))
                    .addGroup(manageRoutePanelLayout.createSequentialGroup()
                        .addGroup(manageRoutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(routeLabel)
                            .addComponent(routeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(stopsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 45, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(manageRoutePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(manageRoutePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Details the action to take when an option in the combo box is selected
     * @param evt 
     */
    private void routeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_routeComboBoxActionPerformed
        // get the selected route
        String selectedItem = (String) routeComboBox.getSelectedItem();
        
        if (selectedItem != null) {
            // extract the route ID from the selected item
            String routeId = selectedItem.split(" - ")[0];
            
            // find the route by ID
            selectedRoute = database.getRouteManager().getRouteById(routeId);
            
            if (selectedRoute != null) {
                // update the route name field
                routeNameTxt.setText(selectedRoute.getName());
                
                // update the stops list
                updateStopsList();
            }
        }
    }//GEN-LAST:event_routeComboBoxActionPerformed
    /**
     * Details the action to take when the add stop button is clicked
     * @param evt 
     */
    private void addStopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStopButtonActionPerformed
        if (selectedRoute == null) {
            JOptionPane.showMessageDialog(this, 
                    "Please select a route first.", 
                    "No Route Selected", 
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String stopName = stopNameTxt.getText().trim();
        String distanceStr = distanceTxt.getText().trim();
        
        if (stopName.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                    "Please enter a stop name.", 
                    "Missing Information", 
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        double distance = Double.parseDouble(distanceStr);

        // create and add the bus stop
        BusStop busStop = new BusStop(stopName, distance);
        selectedRoute.addStop(busStop);

        // update the stops list
        updateStopsList();

        // clear the input fields
        stopNameTxt.setText("");
        distanceTxt.setText("");
            
    }//GEN-LAST:event_addStopButtonActionPerformed
/**
 * Details the action to take when the remove button is clicked
 * @param evt 
 */
    private void removeStopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeStopButtonActionPerformed
        if (selectedRoute == null) {
            JOptionPane.showMessageDialog(this, 
                    "Please select a route first.", 
                    "No Route Selected", 
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        int selectedIndex = stopsList.getSelectedIndex();
        
        if (selectedIndex >= 0) {
            // get the selected stop
            ArrayList<BusStop> stops = selectedRoute.getStops();
            
            if (selectedIndex < stops.size()) {
                // remove the stop from the route
                BusStop stopToRemove = stops.get(selectedIndex);
                selectedRoute.removeStop(stopToRemove);
                
                // update the stops list
                updateStopsList();
            }
        } else {
            JOptionPane.showMessageDialog(this, 
                    "Please select a stop to remove.", 
                    "No Stop Selected", 
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_removeStopButtonActionPerformed

    /**
     * Details the action to take when the update button is clicked
     * @param evt 
     */
    private void updateRouteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateRouteButtonActionPerformed
        if (selectedRoute == null) {
            JOptionPane.showMessageDialog(this, 
                    "Please select a route first.", 
                    "No Route Selected", 
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String routeName = routeNameTxt.getText().trim();
        
        if (routeName.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                    "Please enter a route name.", 
                    "Missing Information", 
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // update the route name
        selectedRoute.setName(routeName);
        
        // save changes to CSV
        database.getRouteManager().saveRoutesToCSV();
        
        // refresh the route table in AdminMenuGUI
        if (adminMenuGUI != null) {
            adminMenuGUI.populateRouteTable();
        }
        
        // refresh the route combo box
        populateRouteComboBox();
        
        JOptionPane.showMessageDialog(this, 
                "Route updated successfully!", 
                "Success", 
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_updateRouteButtonActionPerformed
    
    /**
     * Details the action to take when the delete button is clicked
     * @param evt 
     */
    private void deleteRouteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRouteButtonActionPerformed
        if (selectedRoute == null) {
            JOptionPane.showMessageDialog(this, 
                    "Please select a route first.", 
                    "No Route Selected", 
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // confirm deletion
        int confirm = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to delete route '" + selectedRoute.getName() + "'?",
                "Confirm Deletion",
                JOptionPane.YES_NO_OPTION);
        
        if (confirm == JOptionPane.YES_OPTION) {
            // remove the route
            database.getRouteManager().removeRoute(selectedRoute);
            
            // refresh the route table in AdminMenuGUI
            if (adminMenuGUI != null) {
                adminMenuGUI.populateRouteTable();
            }
            
            // refresh the route combo box
            populateRouteComboBox();
            
            // clear the form
            routeNameTxt.setText("");
            stopsListModel.clear();
            selectedRoute = null;
            
            JOptionPane.showMessageDialog(this, 
                    "Route deleted successfully!", 
                    "Success", 
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_deleteRouteButtonActionPerformed

    /**
     * populates the route combo box with all available routes
     */
    private void populateRouteComboBox() {
        routeComboBox.removeAllItems();
        
        ArrayList<Route> routes = database.getRouteManager().getRoutes();
        
        for (Route route : routes) {
            routeComboBox.addItem(route.getRouteID() + " - " + route.getName());
        }
    }
    
    /**
     * updates the stops list with the current stops of the selected route
     */
    private void updateStopsList() {
        stopsListModel.clear();
        
        if (selectedRoute != null) {
            ArrayList<BusStop> stops = selectedRoute.getStops();
            
            for (BusStop stop : stops) {
                stopsListModel.addElement(stop.getName() + " (Distance: " + stop.getDistanceToNext() + " miles)");
            }
        }
    }
    
    /**
     * Applies focus effects to text fields
     * @param field
     * @param placeholder 
     */
    private void applyTextFieldEffects(JTextField field, String placeholder) {
        field.setForeground(Color.GRAY);
        field.setText(placeholder);
        field.setBorder(BorderFactory.createLineBorder(Color.WHITE));

        field.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                if (field.getText().equals(placeholder)) {
                    field.setText("");
                    field.setForeground(Color.BLACK);
                }
                field.setBorder(BorderFactory.createLineBorder(Color.GREEN));
            }

            @Override
            public void focusLost(FocusEvent e) {
                if (field.getText().isEmpty()) {
                    field.setText(placeholder);
                    field.setForeground(Color.GRAY);
                }
                field.setBorder(BorderFactory.createLineBorder(Color.WHITE));
            }
        });
    }
    
    /**
     * Styles any buttons passed as a parameter
     * @param button 
     */
    private void styleButton(JButton button) {
        button.setBackground(Color.WHITE);
        button.setForeground(Color.BLACK);
        button.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        button.setPreferredSize(new Dimension(160, 23));
        button.setOpaque(true);
        button.setBorderPainted(false);
        button.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        Color hover = Color.green;

        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                button.setBackground(hover);
            }

            @Override
            public void mouseExited(MouseEvent e) {
                button.setBackground(Color.WHITE);
            }
        });
    }
    
    /**
     * Styles the combo box it receives as a parameter
     * @param comboBox 
     */
    private void styleComboBox(JComboBox<?> comboBox) {
    comboBox.setBackground(Color.WHITE);
    comboBox.setForeground(Color.BLACK);
    comboBox.setFont(new Font("Segoe UI", Font.PLAIN, 12));
    comboBox.setPreferredSize(new Dimension(160, 23));
    comboBox.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    comboBox.setBorder(BorderFactory.createLineBorder(Color.WHITE));

    comboBox.addFocusListener(new FocusAdapter() {
        @Override
        public void focusGained(FocusEvent e) {
            comboBox.setBorder(BorderFactory.createLineBorder(Color.GREEN));
        }

        @Override
        public void focusLost(FocusEvent e) {
            comboBox.setBorder(BorderFactory.createLineBorder(Color.WHITE));
        }
    });
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addStopButton;
    private javax.swing.JTextField distanceTxt;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel manageRoutePanel;
    private javax.swing.JButton removeStopButton;
    private javax.swing.JComboBox<String> routeComboBox;
    private javax.swing.JLabel routeLabel;
    private javax.swing.JTextField routeNameTxt;
    private javax.swing.JTextField stopNameTxt;
    private javax.swing.JLabel stopsLabel;
    private javax.swing.JList<String> stopsList;
    private javax.swing.JButton updateRouteButton;
    // End of variables declaration//GEN-END:variables
}